{"version":3,"sources":["./src/app/tasks/task.module.ts","./src/app/tasks/components/header/header.component.ts","./src/app/tasks/components/header/header.component.html","./src/app/tasks/components/tasks/tasks.component.ts","./src/app/tasks/components/tasks/tasks.component.html","./src/environments/environment.ts","./src/app/tasks/actions/tasks.actions.ts","./src/app/tasks/components/footer/footer.component.ts","./src/app/tasks/components/footer/footer.component.html","./src/app/tasks/components/main/main.component.ts","./src/app/tasks/components/main/main.component.html","./src/app/tasks/reducers/tasks.reducer.ts","./src/app/tasks/components/task/task.component.ts","./src/app/tasks/components/task/task.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/tasks/services/tasks-storage.service.ts","./src/app/tasks/models/app-state.model.ts","./src/app/tasks/selectors/tasks.selectors.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport {Component, NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { MainComponent } from './components/main/main.component';\r\nimport { TaskComponent } from './components/task/task.component';\r\nimport { TasksComponent } from './components/tasks/tasks.component';\r\nimport { FooterComponent } from './components/footer/footer.component';\r\nimport { TasksStorageService } from './services/tasks-storage.service';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { TaskReducer } from './reducers/tasks.reducer';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox'\r\n\r\n\r\nconst MaterialComponents = [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatCheckboxModule\r\n];\r\n\r\n  \r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: TasksComponent,\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    //each new component need to be added here\r\n    declarations: [TasksComponent, HeaderComponent, MainComponent, TaskComponent, FooterComponent],\r\n    imports:[\r\n        CommonModule,\r\n        RouterModule.forChild(routes),\r\n        FormsModule,\r\n        StoreModule.forRoot({\r\n            tasks: TaskReducer,\r\n          }),\r\n        MaterialComponents\r\n    ],\r\n    providers: [TasksStorageService],\r\n\r\n})\r\nexport class TaskModule{}","import { Component, Input } from \"@angular/core\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Store } from '@ngrx/store';\r\nimport { TaskInterface } from \"../../models/task.interface\";\r\nimport { TasksState } from \"../../models/app-state.model\";\r\nimport * as TaskActions from '../../actions/tasks.actions';\r\n\r\n@Component({\r\n    selector: 'app-tasks-header',\r\n    templateUrl: './header.component.html',\r\n    \r\n})\r\n\r\n//Component for the header, used for input when adding a new task\r\nexport class HeaderComponent {\r\n    @Input() newTaskDescription: string\r\n\r\n    constructor(private store: Store<TasksState>) {}\r\n\r\n    //add a new task with default isEditing, isCompleted and image_url\r\n    addTask(): void {\r\n        if (this.newTaskDescription != '') {\r\n            const task: TaskInterface = {\r\n              id: uuid(),\r\n              text: this.newTaskDescription,\r\n              isEditing: false,\r\n              isCompleted: false,\r\n              image_url: ''\r\n            };\r\n            this.store.dispatch(TaskActions.addTask({task: task}));\r\n            //a way to reset task description\r\n            this.newTaskDescription = '';\r\n          }\r\n    }\r\n\r\n}\r\n","<header class=\"header\">\r\n    <h1 class=\"mat-display-3\">to do!</h1>\r\n    <input\r\n        class=\"new-task\"\r\n        placeholder=\"What needs to be done?\"\r\n        autoFocus\r\n        [(ngModel)]=\"this.newTaskDescription\"\r\n        (keyup.enter)=\"addTask()\"\r\n    />\r\n    </header>","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'app-tasks',\r\n    templateUrl: './tasks.component.html',\r\n\r\n})\r\n\r\n//Component for the entire task app\r\nexport class TasksComponent {}","<div class=\"taskapp\">\r\n    <app-tasks-header></app-tasks-header>\r\n    <app-tasks-main></app-tasks-main>\r\n    <app-tasks-footer></app-tasks-footer>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { createAction, props } from '@ngrx/store';\nimport { TaskInterface } from '../models/task.interface';\nimport { Update } from '@ngrx/entity';\n\n// load all tasks, mainly used for init() call\nexport const loadTasks = createAction('[Tasks] Load Tasks', props<{ tasks: TaskInterface[] }>());\n\n// add a new task\nexport const addTask = createAction('[Tasks] Add Task', props<{ task: TaskInterface }>());\n\n// edits a single task with the new TaskInterface object\nexport const editTask = createAction('[Tasks] Edit Task', props<{ edit: Update<TaskInterface> }>());\n\n// removes a single task with the given id\nexport const removeTask = createAction('[Tasks] Delete Task', props<{ id: number }>());\n\n// marks all tasks as completed\nexport const completeAllTasks = createAction('[Tasks] Completes All Task', props<{ updates: Update<TaskInterface>[] }>());\n\n// clear all tasks at once\nexport const clearTasks = createAction('[Tasks] Clear Tasks');\n","import { Component } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { TasksState } from \"../../models/app-state.model\";\r\nimport * as taskSelector from '../../selectors/tasks.selectors';\r\nimport * as TaskActions from '../../actions/tasks.actions';\r\n\r\n@Component({\r\n    selector: 'app-tasks-footer',\r\n    templateUrl: './footer.component.html',\r\n\r\n})\r\n\r\n//Component for the footer, consisting of task count and clearing all tasks at once\r\nexport class FooterComponent {\r\n    noTasksClass$: Observable<boolean>;\r\n    activeCount$: Observable<number>;\r\n    itemsLeftText$: Observable<string>;\r\n\r\n    constructor(private store: Store<TasksState>) {       \r\n        this.noTasksClass$ = this.store.select(taskSelector.selectAllTasks).pipe(\r\n            map(tasks => tasks.length === 0)\r\n        );\r\n\r\n        this.activeCount$ = this.store.select(taskSelector.selectAllTasks).pipe(\r\n            map(tasks => tasks.filter(task => !task.isCompleted).length)\r\n        );\r\n\r\n        this.itemsLeftText$ = this.activeCount$.pipe(\r\n            map(activeCount => `item${activeCount > 1 ? 's' : ''} uncompleted`)\r\n        )\r\n    }\r\n\r\n    //A way for user to clear all tasks, destructive operation\r\n    clearAllTasks(): void {\r\n        this.store.dispatch(TaskActions.clearTasks());\r\n    }\r\n\r\n}","<footer class=\"footer\" [ngClass]=\"{hidden: noTasksClass$ | async}\">\r\n    <span class=\"task-count\">\r\n        <strong>{{ activeCount$ | async }}</strong>\r\n        {{ itemsLeftText$ | async }}\r\n    </span>\r\n\r\n    \r\n    <span>\r\n        <button mat-raised-button color=\"warn\" class=\"clear-all-button\"\r\n         (click)=\"clearAllTasks()\">Clear All</button>        \r\n    </span>\r\n</footer>","import { Component } from \"@angular/core\";\r\nimport { TaskInterface } from \"../../models/task.interface\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport { map } from \"rxjs/operators\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { TasksState } from \"../../models/app-state.model\";\r\nimport { Update } from '@ngrx/entity';\r\nimport { TasksStorageService } from '../../services/tasks-storage.service';\r\n\r\nimport * as taskSelector from '../../selectors/tasks.selectors';\r\nimport * as TaskActions from '../../actions/tasks.actions';\r\n\r\n@Component({\r\n    selector: 'app-tasks-main',\r\n    templateUrl: './main.component.html'\r\n})\r\n\r\n//Component displaying all of the current tasks\r\nexport class MainComponent {\r\n    visibleTasks: Observable<TaskInterface[]>;\r\n    isAllTasksSelected$: Observable<boolean>;\r\n    editingId: string | null = null;\r\n\r\n    constructor(private store: Store<TasksState>, private syncStorage: TasksStorageService) {\r\n\r\n        //checks if every task is completed\r\n        this.isAllTasksSelected$ = this.store.select(taskSelector.selectAllTasks).pipe(\r\n            map((tasks => tasks.every(task => task.isCompleted)))\r\n        );\r\n        \r\n        this.visibleTasks = this.store.select(taskSelector.selectAllTasks);\r\n\r\n        //initialises storage syncing\r\n        this.syncStorage.init();\r\n    }\r\n\r\n    setEditingId(editingId: string | null): void {\r\n        this.editingId = editingId;\r\n    }\r\n\r\n    //function to mark all tasks as completed at once\r\n    checkAllTasks(isCompleted: boolean): void {\r\n        const updatedTasks: Update<TaskInterface>[] = [];\r\n\r\n        var taskIds: string[] | number[];\r\n\r\n        this.store.select(taskSelector.selectTaskIds).subscribe(x => taskIds = x);\r\n    \r\n        taskIds.forEach(task_id => {\r\n            var editedTask: Update<TaskInterface> = {\r\n                id: task_id,\r\n                changes: { isCompleted: isCompleted }\r\n            }\r\n                updatedTasks.push(editedTask);\r\n            }\r\n        );\r\n        this.store.dispatch(TaskActions.completeAllTasks({updates: updatedTasks}));\r\n    }\r\n}","<section class=\"main\">\r\n    <input id=\"toggle-all\" class=\"toggle-all\" type=\"checkbox\"\r\n     [checked]=\"isAllTasksSelected$ | async\"\r\n     (change)=\"checkAllTasks($event)\"/>\r\n\r\n    <label for=\"toggle-all\">Mark all as completed</label>\r\n\r\n    <ul class=\"task-list\">\r\n        <app-tasks-task \r\n        *ngFor=\"let task of visibleTasks | async\"\r\n        [task]=\"task\"\r\n        [isEditing]=\"editingId === task.id\"\r\n        (setEditingId)=\"setEditingId($event)\">\r\n        {{ task.text }}\r\n        </app-tasks-task>\r\n    </ul>\r\n</section>","import * as TaskActions from '../actions/tasks.actions';\nimport { taskAdapter, TasksState, initialState } from '../models/app-state.model';\nimport { Action, createReducer, on } from '@ngrx/store';\n\n\n  const reducer = createReducer(\n    initialState,\n    on(TaskActions.addTask, (state, { task }) => {\n      return taskAdapter.addOne(task, state)\n    }),\n    on(TaskActions.editTask, (state, { edit }) => {\n      return taskAdapter.updateOne(edit, state);\n    }),\n    on(TaskActions.removeTask, (state, { id }) => {\n      return taskAdapter.removeOne(id, state);\n    }),\n    on(TaskActions.loadTasks, (state, { tasks }) => {\n      return taskAdapter.setAll(tasks, state);\n    }),\n    on(TaskActions.completeAllTasks, (state, { updates }) => {\n      return taskAdapter.updateMany(updates, state);\n    }),\n    on(TaskActions.clearTasks, state => {\n      return taskAdapter.removeAll({ ...state, selectedTaskId: null });\n    })\n);\n\nexport function TaskReducer(state: TasksState, action: Action) {\n  return reducer(state, action);\n}\n","import { Component, Input, Output, EventEmitter, OnInit, ViewChild, ElementRef, OnChanges, SimpleChanges } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { TasksState } from \"../../models/app-state.model\";\r\nimport { TaskInterface } from \"../../models/task.interface\";\r\nimport * as TaskActions from '../../actions/tasks.actions';\r\nimport { Update } from '@ngrx/entity';\r\n\r\n\r\n@Component({\r\n    selector: 'app-tasks-task',\r\n    templateUrl: './task.component.html',\r\n\r\n})\r\n\r\n//Component displaying each individual task\r\nexport class TaskComponent implements OnInit, OnChanges {\r\n    //rxjs style\r\n    @Input('task') taskProps: TaskInterface\r\n    @Input('isEditing') isEditingProps: boolean;\r\n    @Output('setEditingId') setEditingIdEvent: EventEmitter<number | null> = new EventEmitter();\r\n\r\n    constructor(private store: Store<TasksState>) {}\r\n\r\n    editingText: string = '';\r\n\r\n    @ViewChild('textInput') textInput: ElementRef;\r\n\r\n    ngOnInit(): void {\r\n        this.editingText = this.taskProps.text;\r\n    }\r\n\r\n    //A way to focus on text during editting mode\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.isEditingProps.currentValue) {\r\n            setTimeout(() => {\r\n            this.textInput.nativeElement.focus();\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    setTaskInEditMode(): void {\r\n        this.setEditingIdEvent.emit(\r\n            this.taskProps.id\r\n        )\r\n    }\r\n\r\n    removeTask(): void {\r\n        this.store.dispatch(TaskActions.removeTask({id: this.taskProps.id}));\r\n    }\r\n\r\n    //toggles the completion of a task\r\n    toggleCompletion(): void {\r\n        const completedTask: Update<TaskInterface> = {\r\n            id: this.taskProps.id,\r\n            changes: { isCompleted: !this.taskProps.isCompleted }\r\n          }\r\n          this.store.dispatch(TaskActions.editTask({edit: completedTask}));\r\n    }\r\n\r\n    //capture only the final editted text\r\n    editText(event: Event): void {\r\n        const value = (event.target as HTMLInputElement).value;\r\n        this.editingText = value;\r\n    }\r\n\r\n    //handle task editing, rollback to original state if given text is empty\r\n    editTask(): void{\r\n        if (this.editingText != '') {\r\n            const editedTask: Update<TaskInterface> = {\r\n              id: this.taskProps.id,\r\n              changes: { text: this.editingText, isEditing: false }\r\n            }\r\n            this.store.dispatch(TaskActions.editTask({edit: editedTask}));\r\n            this.editingText = '';\r\n        }\r\n        this.setEditingIdEvent.emit(null);\r\n    }\r\n\r\n    //add or edit a given image, converts to url\r\n    editImageUrl(event): void {\r\n        if(event.target.files) {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(event.target.files[0]);\r\n            reader.onload = (e: any) => {\r\n                const taskWithImage: Update<TaskInterface> = {\r\n                  id: this.taskProps.id,\r\n                  changes: { image_url: e.target.result }\r\n                }\r\n                this.store.dispatch(TaskActions.editTask({edit: taskWithImage}));\r\n            }\r\n        }\r\n    }\r\n}","<li class=\"task\" [ngClass]=\"{ editing: isEditingProps }\">\r\n    <div class=\"view\">\r\n      <input\r\n        class=\"toggle\"\r\n        type=\"checkbox\"\r\n        [checked]=\"taskProps.isCompleted\"\r\n        (change)=\"toggleCompletion()\"\r\n      />\r\n\r\n      <label>\r\n        <img *ngIf=\"!(taskProps.image_url == '')\" class=\"task-image\" src={{taskProps.image_url}} alt=\"No image\"/>\r\n        <td [ngClass]=\"taskProps.isCompleted ? 'strikethrough': 'null' \">{{ taskProps.text }}</td>\r\n      </label>\r\n\r\n      \r\n\r\n      <button mat-mini-fab class=\"remove-task\" color=\"warn\" aria-label=\"delete\" (click)=\"removeTask()\">\r\n        <mat-icon>delete</mat-icon>\r\n      </button>\r\n\r\n      <button mat-mini-fab class=\"upload-image\" color=\"primary\"\r\n        aria-label=\"upload-image\" (click)=\"fileInput.click()\">\r\n        <mat-icon>image</mat-icon>\r\n        <input hidden (change)=\"editImageUrl($event)\" #fileInput type=\"file\" id=\"file\"\r\n          accept=\"image/gif,image/jpeg,image/jpg,image/png\">\r\n      </button>\r\n\r\n      <button mat-mini-fab class=\"edit-task\" color=\"primary\" aria-label=\"edit\" (click)=\"setTaskInEditMode()\">\r\n        <mat-icon>edit</mat-icon>\r\n      </button>\r\n\r\n    </div>\r\n\r\n    <!-- only open this during editting mode -->\r\n    <ng-container *ngIf=\"isEditingProps\">\r\n        <input class=\"edit\"\r\n         #textInput\r\n         [value]=\"editingText\"\r\n         (keyup)=\"editText($event)\"\r\n         (keyup.enter)=\"editTask()\"/>\r\n\r\n         <button mat-mini-fab class=\"editting-mode\" color=\"primary\" aria-label=\"edit\" (click)=\"editTask()\">\r\n            <mat-icon>done</mat-icon>\r\n          </button>    \r\n\r\n    </ng-container>\r\n\r\n    <mat-divider></mat-divider>\r\n  </li>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n  title = 'app works!';\r\n}\r\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { TaskModule } from './tasks/task.module';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    TaskModule,\r\n    BrowserAnimationsModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport {select, Store} from '@ngrx/store';\r\nimport {filter} from 'rxjs/operators';\r\n\r\nimport { TasksState } from '../models/app-state.model';\r\nimport { tasksFeatureSelector } from '../selectors/tasks.selectors';\r\nimport * as TaskActions from '../actions/tasks.actions';\r\n\r\nexport const TASKS_LOCAL_STORAGE_KEY = 'task-key';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class TasksStorageService {\r\n  private isInitialized = false;\r\n\r\n  constructor(private store: Store<TasksState>) { }\r\n\r\n  init() {\r\n    if (this.isInitialized) {\r\n      return;\r\n    }\r\n\r\n    this.isInitialized = true;\r\n\r\n    // loading of task entities from user local storage\r\n    this.loadFromStorage();\r\n\r\n    // saving into local storage\r\n    this.store.pipe(\r\n      select(tasksFeatureSelector),\r\n      filter(state => !!state)\r\n    ).subscribe(state => {\r\n      localStorage.setItem(TASKS_LOCAL_STORAGE_KEY, JSON.stringify(state));\r\n    });\r\n\r\n    // load tasks from local storage, when storage changes\r\n    window.addEventListener('storage', () => this.loadFromStorage());\r\n  }\r\n\r\n //load entities from local storage, if exists\r\n  private loadFromStorage() {\r\n    const storageState = localStorage.getItem(TASKS_LOCAL_STORAGE_KEY);\r\n\r\n    if (storageState) {\r\n      const taskEntities = JSON.parse(storageState)[\"entities\"];\r\n\r\n      const isEmpty = (object: Object) => {\r\n        for (var i in object) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n\r\n      //prevent error from empty storage\r\n      if(!isEmpty(taskEntities)) {\r\n          this.store.dispatch(TaskActions.loadTasks({\r\n              tasks: JSON.parse(JSON.stringify(Object.values(taskEntities)))\r\n          }));\r\n      }\r\n    }\r\n  }\r\n  \r\n}","import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { TaskInterface } from './task.interface';\n\nexport interface TasksState extends EntityState<TaskInterface> {\n    // additional entities state properties\n}\n\n// create entity state adapter for tasks\nexport const taskAdapter: EntityAdapter<TaskInterface> = createEntityAdapter<TaskInterface>();\n\nconst tasksDefaultState: TasksState = {\n    ids: [],\n    entities: {},\n};\n\nexport const initialState: TasksState = taskAdapter.getInitialState(\n    tasksDefaultState\n);","import { TasksState, taskAdapter } from '../models/app-state.model';\r\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\r\n   \r\nexport const tasksFeatureSelector = createFeatureSelector<TasksState>('tasks');\r\n\r\n  // get the selectors\r\n  const {\r\n    selectIds,\r\n    selectEntities,\r\n    selectAll,\r\n    selectTotal,\r\n  } = taskAdapter.getSelectors();\r\n   \r\n  //obtain an array of task ids\r\n  export const selectTaskIds = createSelector(tasksFeatureSelector, selectIds);\r\n   \r\n  //obtain dictionary of task entities\r\n  export const selectTaskEntities = createSelector(tasksFeatureSelector, selectEntities);\r\n   \r\n  //obtain an array of task entities\r\n  export const selectAllTasks = createSelector(tasksFeatureSelector, selectAll);\r\n   \r\n  //obtain the total number of task entities in store\r\n  export const selectTaskTotal = createSelector(tasksFeatureSelector, selectTotal);\r\n\r\n   \r\n\r\n  \r\n\r\n  ","import {NgModule} from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule{}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}